name: Unit tests

on:
  # Build on pushes branches that have a PR (including drafts)
  pull_request:
  # Build on commits pushed to branches without a PR if it's in the allowlist
  push:
    branches: [next]

jobs:
  # We have two jobs here:
  # - `install`: the first job is unsharded with the purpose of installing and
  #   building. the result of the install and build will be cached for the next
  #   job
  # - `test`: the test job run the all the jest tests and is sharded and should
  #   utilize the cached resources from the first install job
  install:
    name: Install (${{ matrix.os }} / node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [18, 20]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          # this enables built-in node_modules caching for yarn-based projects
          cache: yarn

      - name: Install
        run: yarn install --frozen-lockfile

      # NOTE: this build is cached with turbo repo remote caching
      - name: Build
        run: yarn build

  test:
    timeout-minutes: 60
    name: Test (${{ matrix.os }} / node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    needs: [install]

    strategy:
      # we want to know if a test fails on a specific node version
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [18, 20]
        shard: [1/4, 2/4, 3/4, 4/4]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Install project dependencies
        run: yarn install --frozen-lockfile

      - name: Restore build
        run: yarn build

      - name: Test
        id: test
        run: |
          node -v
          npm -v
          yarn test --silent --shard=${{ matrix.shard }}
        env:
          # FIXME: re-enable CLI tests with this
          # SANITY_CI_CLI_AUTH_TOKEN: ${{ secrets.SANITY_CI_CLI_AUTH_TOKEN }}
          GITHUB_SHARD_IDENTIFIER: ${{ matrix.shardIndex }}-${{ matrix.shardTotal }}
